import React, { useState, useEffect, createContext, useContext } from 'react';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement } from 'chart.js';
import { Doughnut } from 'recharts';

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

// Custom Icons (replacing react-icons)
const Icon = ({ name, className = "w-5 h-5" }) => {
  const icons = {
    user: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
      </svg>
    ),
    users: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z" />
      </svg>
    ),
    plus: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
      </svg>
    ),
    dollar: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
      </svg>
    ),
    settings: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      </svg>
    ),
    logout: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
      </svg>
    ),
    bell: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
      </svg>
    ),
    eye: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
      </svg>
    ),
    eyeOff: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
      </svg>
    ),
    upload: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
    ),
    edit: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
      </svg>
    ),
    trash: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
      </svg>
    ),
    check: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
    ),
    alert: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
    ),
    moon: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
      </svg>
    ),
    sun: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
      </svg>
    ),
    home: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
      </svg>
    ),
    pieChart: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
      </svg>
    ),
    creditCard: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
      </svg>
    ),
    trendingUp: (
      <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
      </svg>
    ),
  };
  return icons[name] || null;
};

// Custom Toast Component
const Toast = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(onClose, 3000);
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 ${
      type === 'success' 
        ? 'bg-green-500 text-white' 
        : type === 'error'
        ? 'bg-red-500 text-white'
        : 'bg-blue-500 text-white'
    }`}>
      <div className="flex items-center space-x-2">
        <Icon name={type === 'success' ? 'check' : type === 'error' ? 'alert' : 'bell'} className="w-4 h-4" />
        <span>{message}</span>
        <button onClick={onClose} className="ml-2 hover:opacity-80">
          ×
        </button>
      </div>
    </div>
  );
};

// Auth Context
const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      // Simulate user data from token
      setUser({ id: 1, name: 'John Doe', email: 'john@example.com' });
    }
    setLoading(false);
  }, []);

  const login = (userData, token) => {
    localStorage.setItem('token', token);
    setUser(userData);
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => useContext(AuthContext);

// Theme Context
const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [isDark, setIsDark] = useState(true);

  const toggleTheme = () => setIsDark(!isDark);

  return (
    <ThemeContext.Provider value={{ isDark, toggleTheme }}>
      <div className={isDark ? 'dark' : ''}>
        {children}
      </div>
    </ThemeContext.Provider>
  );
};

const useTheme = () => useContext(ThemeContext);

// Toast Context
const ToastContext = createContext();

const ToastProvider = ({ children }) => {
  const [toasts, setToasts] = useState([]);

  const showToast = (message, type = 'info') => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type }]);
  };

  const removeToast = (id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ showToast }}>
      {children}
      {toasts.map(toast => (
        <Toast
          key={toast.id}
          message={toast.message}
          type={toast.type}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </ToastContext.Provider>
  );
};

const useToast = () => useContext(ToastContext);

// Custom Router Implementation
const RouterContext = createContext();

const Router = ({ children }) => {
  const [currentPath, setCurrentPath] = useState(window.location.pathname);

  const navigate = (path) => {
    window.history.pushState({}, '', path);
    setCurrentPath(path);
  };

  useEffect(() => {
    const handlePopstate = () => {
      setCurrentPath(window.location.pathname);
    };

    window.addEventListener('popstate', handlePopstate);
    return () => window.removeEventListener('popstate', handlePopstate);
  }, []);

  return (
    <RouterContext.Provider value={{ currentPath, navigate }}>
      {children}
    </RouterContext.Provider>
  );
};

const useRouter = () => useContext(RouterContext);

const Route = ({ path, component: Component }) => {
  const { currentPath } = useRouter();
  return currentPath === path ? <Component /> : null;
};

const Navigate = ({ to }) => {
  const { navigate } = useRouter();
  
  useEffect(() => {
    navigate(to);
  }, [to, navigate]);
  
  return null;
};

const Link = ({ to, children, className }) => {
  const { navigate } = useRouter();
  
  const handleClick = (e) => {
    e.preventDefault();
    navigate(to);
  };
  
  return (
    <a href={to} onClick={handleClick} className={className}>
      {children}
    </a>
  );
};

// Protected Route Component
const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }
  
  return user ? children : <Navigate to="/login" />;
};

// Cosmic Background Component
const CosmicBackground = ({ children }) => {
  const { isDark } = useTheme();
  
  return (
    <div className={`min-h-screen transition-all duration-500 ${
      isDark 
        ? 'bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900' 
        : 'bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50'
    }`}>
      <div className="absolute inset-0 overflow-hidden">
        <div className="stars"></div>
        <div className="stars2"></div>
        <div className="stars3"></div>
      </div>
      <div className="relative z-10">
        {children}
      </div>
      <style jsx>{`
        .stars, .stars2, .stars3 {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          width: 100%;
          height: 100%;
          background: transparent;
        }
        
        .stars {
          background-image: 
            radial-gradient(2px 2px at 20px 30px, #eee, transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 90px 40px, #fff, transparent),
            radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent);
          background-repeat: repeat;
          background-size: 200px 100px;
          animation: twinkle 3s linear infinite;
          opacity: ${isDark ? '0.6' : '0.3'};
        }
        
        .stars2 {
          background-image: 
            radial-gradient(1px 1px at 10px 10px, #fff, transparent),
            radial-gradient(1px 1px at 50px 50px, rgba(255,255,255,0.7), transparent);
          background-repeat: repeat;
          background-size: 150px 80px;
          animation: twinkle 4s linear infinite;
          opacity: ${isDark ? '0.4' : '0.2'};
        }
        
        .stars3 {
          background-image: 
            radial-gradient(1px 1px at 70px 20px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 20px 60px, #fff, transparent);
          background-repeat: repeat;
          background-size: 100px 60px;
          animation: twinkle 5s linear infinite;
          opacity: ${isDark ? '0.5' : '0.25'};
        }
        
        @keyframes twinkle {
          0%, 100% { opacity: 0.3; }
          50% { opacity: 1; }
        }
      `}</style>
    </div>
  );
};

// Header Component
const Header = () => {
  const { user, logout } = useAuth();
  const { isDark, toggleTheme } = useTheme();
  const { navigate } = useRouter();
  const { showToast } = useToast();

  const handleLogout = () => {
    logout();
    navigate('/login');
    showToast('Logged out successfully', 'success');
  };

  return (
    <header className={`sticky top-0 z-50 backdrop-blur-md border-b transition-all duration-300 ${
      isDark 
        ? 'bg-gray-900/80 border-gray-700' 
        : 'bg-white/80 border-gray-200'
    }`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <Link to="/dashboard" className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center">
              <Icon name="dollar" className="text-white w-6 h-6" />
            </div>
            <span className={font-bold text-xl bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent}>
              Shared Expense Manager
            </span>
          </Link>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={toggleTheme}
              className={`p-2 rounded-lg transition-all duration-300 ${
                isDark 
                  ? 'bg-gray-700 text-yellow-400 hover:bg-gray-600' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <Icon name={isDark ? 'sun' : 'moon'} />
            </button>
            
            <button className={`p-2 rounded-lg transition-all duration-300 relative ${
              isDark 
                ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}>
              <Icon name="bell" />
              <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
            </button>
            
            <div className="flex items-center space-x-2">
              <div className={w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center}>
                <Icon name="user" className="text-white w-4 h-4" />
              </div>
              <span className={hidden sm:block ${isDark ? 'text-white' : 'text-gray-900'}}>
                {user?.name}
              </span>
            </div>
            
            <button
              onClick={handleLogout}
              className="p-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-all duration-300"
            >
              <Icon name="logout" />
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

// Custom Doughnut Chart Component (replacing Chart.js)
const CustomDoughnutChart = ({ data }) => {
  const { isDark } = useTheme();
  const total = data.datasets[0].data.reduce((sum, value) => sum + value, 0);
  
  let cumulativePercentage = 0;
  const segments = data.datasets[0].data.map((value, index) => {
    const percentage = (value / total) * 100;
    const startAngle = (cumulativePercentage / 100) * 360 - 90;
    const endAngle = ((cumulativePercentage + percentage) / 100) * 360 - 90;
    
    const startAngleRad = (startAngle * Math.PI) / 180;
    const endAngleRad = (endAngle * Math.PI) / 180;
    
    const largeArcFlag = percentage > 50 ? 1 : 0;
    
    const x1 = 50 + 40 * Math.cos(startAngleRad);
    const y1 = 50 + 40 * Math.sin(startAngleRad);
    const x2 = 50 + 40 * Math.cos(endAngleRad);
    const y2 = 50 + 40 * Math.sin(endAngleRad);
    
    const pathData = [
      M 50 50,
      L ${x1} ${y1},
      A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2},
      'Z'
    ].join(' ');
    
    cumulativePercentage += percentage;
    
    return {
      pathData,
      color: data.datasets[0].backgroundColor[index],
      percentage,
      label: data.labels[index]
    };
  });

  return (
    <div className="w-full aspect-square">
      <svg viewBox="0 0 100 100" className="w-full h-full">
        {segments.map((segment, index) => (
          <path
            key={index}
            d={segment.pathData}
            fill={segment.color}
            stroke={isDark ? '#374151' : '#ffffff'}
            strokeWidth="0.5"
          />
        ))}
        <circle cx="50" cy="50" r="20" fill={isDark ? '#374151' : '#ffffff'} />
      </svg>
      <div className="mt-4 grid grid-cols-2 gap-2">
        {segments.map((segment, index) => (
          <div key={index} className="flex items-center space-x-2">
            <div 
              className="w-3 h-3 rounded-full" 
              style={{ backgroundColor: segment.color }}
            ></div>
            <span className={text-xs ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
              {segment.label}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

// Login/Register Page
const LoginPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({ email: '', password: '', name: '' });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const { isDark } = useTheme();
  const { navigate } = useRouter();
  const { showToast } = useToast();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // Simulate API call
      setTimeout(() => {
        const userData = { id: 1, name: formData.name || 'John Doe', email: formData.email };
        const token = 'mock-jwt-token';
        login(userData, token);
        showToast(isLogin ? 'Login successful!' : 'Registration successful!', 'success');
        navigate('/dashboard');
      }, 1000);
    } catch (error) {
      showToast('Authentication failed', 'error');
    } finally {
      setTimeout(() => setLoading(false), 1000);
    }
  };

  return (
    <CosmicBackground>
      <div className="min-h-screen flex">
        {/* Left Side - Branding */}
        <div className="hidden lg:flex lg:w-1/2 items-center justify-center p-12">
          <div className="text-center">
            <div className="mb-8">
              <div className="w-24 h-24 mx-auto bg-gradient-to-r from-purple-500 to-blue-500 rounded-2xl flex items-center justify-center mb-6">
                <Icon name="dollar" className="text-white w-12 h-12" />
              </div>
              <h1 className={text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent}>
                Shared Expense Manager
              </h1>
              <p className={text-xl ${isDark ? 'text-gray-300' : 'text-gray-600'}}>
                AI-Powered Group Expense Splitting
              </p>
            </div>
            <div className={space-y-4 text-left ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
              <div className="flex items-center space-x-3">
                <Icon name="check" className="text-green-500 w-5 h-5" />
                <span>Smart fraud detection</span>
              </div>
              <div className="flex items-center space-x-3">
                <Icon name="check" className="text-green-500 w-5 h-5" />
                <span>Multi-currency support</span>
              </div>
              <div className="flex items-center space-x-3">
                <Icon name="check" className="text-green-500 w-5 h-5" />
                <span>Automated split calculations</span>
              </div>
            </div>
          </div>
        </div>

        {/* Right Side - Form */}
        <div className="w-full lg:w-1/2 flex items-center justify-center p-8">
          <div className={`w-full max-w-md p-8 rounded-2xl backdrop-blur-md border ${
            isDark 
              ? 'bg-gray-800/50 border-gray-700' 
              : 'bg-white/80 border-gray-200'
          }`}>
            <div className="text-center mb-8">
              <div className="lg:hidden mb-6">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-purple-500 to-blue-500 rounded-xl flex items-center justify-center mb-4">
                  <Icon name="dollar" className="text-white w-8 h-8" />
                </div>
                <h1 className={text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent}>
                  Shared Expense Manager
                </h1>
              </div>
              <div className="flex bg-gray-200 dark:bg-gray-700 rounded-lg p-1">
                <button
                  type="button"
                  onClick={() => setIsLogin(true)}
                  className={`flex-1 py-2 px-4 rounded-md transition-all duration-300 ${
                    isLogin 
                      ? 'bg-white dark:bg-gray-600 shadow-md text-gray-900 dark:text-white' 
                      : 'text-gray-500 dark:text-gray-400'
                  }`}
                >
                  Login
                </button>
                <button
                  type="button"
                  onClick={() => setIsLogin(false)}
                  className={`flex-1 py-2 px-4 rounded-md transition-all duration-300 ${
                    !isLogin 
                      ? 'bg-white dark:bg-gray-600 shadow-md text-gray-900 dark:text-white' 
                      : 'text-gray-500 dark:text-gray-400'
                  }`}
                >
                  Register
                </button>
              </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              {!isLogin && (
                <div>
                  <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                    Full Name
                  </label>
                  <input
                    type="text"
                    required={!isLogin}
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className={`w-full px-4 py-3 rounded-lg border transition-all duration-300 ${
                      isDark 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                    } focus:ring-2 focus:ring-purple-500/20`}
                    placeholder="Enter your full name"
                  />
                </div>
              )}

              <div>
                <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                  Email Address
                </label>
                <input
                  type="email"
                  required
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-300 ${
                    isDark 
                      ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                      : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                  } focus:ring-2 focus:ring-purple-500/20`}
                  placeholder="Enter your email"
                />
              </div>

              <div>
                <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                  Password
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    required
                    value={formData.password}
                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                    className={`w-full px-4 py-3 pr-12 rounded-lg border transition-all duration-300 ${
                      isDark 
                        ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                        : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                    } focus:ring-2 focus:ring-purple-500/20`}
                    placeholder="Enter your password"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className={`absolute right-3 top-1/2 transform -translate-y-1/2 ${
                      isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-700'
                    }`}
                  >
                    <Icon name={showPassword ? 'eyeOff' : 'eye'} />
                  </button>
                </div>
              </div>

              {isLogin && (
                <div className="text-right">
                  <button
                    type="button"
                    className="text-sm text-purple-400 hover:text-purple-300 transition-colors duration-300"
                  >
                    Forgot Password?
                  </button>
                </div>
              )}

              <button
                type="submit"
                disabled={loading}
                className="w-full py-3 px-4 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:scale-100"
              >
                {loading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mr-2"></div>
                    {isLogin ? 'Signing In...' : 'Creating Account...'}
                  </div>
                ) : (
                  isLogin ? 'Sign In' : 'Create Account'
                )}
              </button>
            </form>
          </div>
        </div>
      </div>
    </CosmicBackground>
  );
};

// Dashboard Page
const DashboardPage = () => {
  const { isDark } = useTheme();
  const { navigate } = useRouter();
  const [dashboardData, setDashboardData] = useState({
    balance: { amount: 234.50, currency: 'USD' },
    expenses: [
      { id: 1, date: '2024-01-15', description: 'Dinner at Restaurant', amount: 120.00, currency: 'USD', payer: 'John', yourShare: 40.00 },
      { id: 2, date: '2024-01-14', description: 'Grocery Shopping', amount: 85.50, currency: 'EUR', payer: 'Alice', yourShare: 28.50 },
      { id: 3, date: '2024-01-13', description: 'Movie Tickets', amount: 45.00, currency: 'USD', payer: 'You', yourShare: 15.00 },
    ],
    settlements: [
      { id: 1, from: 'You', to: 'Alice', amount: 25.50, currency: 'USD' },
      { id: 2, from: 'Bob', to: 'You', amount: 40.00, currency: 'EUR' },
    ],
    fraudAlerts: 2
  });

  const chartData = {
    labels: ['Food & Dining', 'Transportation', 'Entertainment', 'Utilities'],
    datasets: [{
      data: [45, 20, 25, 10],
      backgroundColor: ['#8B5CF6', '#3B82F6', '#06B6D4', '#10B981'],
      borderColor: isDark ? '#374151' : '#ffffff',
      borderWidth: 2,
    }]
  };

  return (
    <CosmicBackground>
      <Header />
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className={text-3xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}}>
            Dashboard
          </h1>
          <p className={mt-2 ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
            Welcome back! Here's your expense overview.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Balance Overview */}
          <div className={`lg:col-span-2 p-6 rounded-2xl backdrop-blur-md border transition-all duration-300 ${
            isDark 
              ? 'bg-gray-800/50 border-gray-700' 
              : 'bg-white/80 border-gray-200'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <h2 className={text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                Balance Overview
              </h2>
              <div className={`px-3 py-1 rounded-full text-sm ${
                dashboardData.balance.amount > 0 
                  ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
                  : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'
              }`}>
                {dashboardData.balance.amount > 0 ? 'You are owed' : 'You owe'}
              </div>
            </div>
            
            <div className="text-center">
              <div className={`text-4xl font-bold mb-2 ${
                dashboardData.balance.amount > 0 ? 'text-green-500' : 'text-red-500'
              }`}>
                {dashboardData.balance.amount > 0 ? '+' : '-'}${Math.abs(dashboardData.balance.amount)}
              </div>
              <p className={${isDark ? 'text-gray-400' : 'text-gray-600'}}>
                Net Balance
              </p>
            </div>

            <div className="mt-8 grid grid-cols-2 gap-4">
              <div className={p-4 rounded-xl ${isDark ? 'bg-gray-700/50' : 'bg-gray-50'}}>
                <div className="flex items-center space-x-2 mb-2">
                  <Icon name="trendingUp" className="text-green-500 w-5 h-5" />
                  <span className={text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
                    Total Paid
                  </span>
                </div>
                <div className={text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                  $1,247.50
                </div>
              </div>
              <div className={p-4 rounded-xl ${isDark ? 'bg-gray-700/50' : 'bg-gray-50'}}>
                <div className="flex items-center space-x-2 mb-2">
                  <Icon name="creditCard" className="text-blue-500 w-5 h-5" />
                  <span className={text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
                    Your Share
                  </span>
                </div>
                <div className={text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                  $1,013.00
                </div>
              </div>
            </div>
          </div>

          {/* Expense Distribution Chart */}
          <div className={`p-6 rounded-2xl backdrop-blur-md border transition-all duration-300 ${
            isDark 
              ? 'bg-gray-800/50 border-gray-700' 
              : 'bg-white/80 border-gray-200'
          }`}>
            <h3 className={text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}}>
              Expense Distribution
            </h3>
            <CustomDoughnutChart data={chartData} />
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
          {/* Recent Expenses */}
          <div className={`p-6 rounded-2xl backdrop-blur-md border transition-all duration-300 ${
            isDark 
              ? 'bg-gray-800/50 border-gray-700' 
              : 'bg-white/80 border-gray-200'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <h3 className={text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                Recent Expenses
              </h3>
              <button
                onClick={() => navigate('/add-expense')}
                className="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg text-sm hover:from-purple-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105"
              >
                Add New
              </button>
            </div>
            
            <div className="space-y-4">
              {dashboardData.expenses.map((expense) => (
                <div
                  key={expense.id}
                  className={`p-4 rounded-lg border transition-all duration-300 ${
                    isDark 
                      ? 'bg-gray-700/50 border-gray-600' 
                      : 'bg-gray-50 border-gray-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className={font-medium ${isDark ? 'text-white' : 'text-gray-900'}}>
                        {expense.description}
                      </h4>
                      <p className={text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
                        Paid by {expense.payer} • {expense.date}
                      </p>
                    </div>
                    <div className="text-right">
                      <div className={font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                        {expense.currency} {expense.amount}
                      </div>
                      <div className="text-sm text-blue-500">
                        Your share: ${expense.yourShare}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Settlement Suggestions */}
          <div className={`p-6 rounded-2xl backdrop-blur-md border transition-all duration-300 ${
            isDark 
              ? 'bg-gray-800/50 border-gray-700' 
              : 'bg-white/80 border-gray-200'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <h3 className={text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}}>
                Settlement Suggestions
              </h3>
              {dashboardData.fraudAlerts > 0 && (
                <div className="flex items-center space-x-2 px-3 py-1 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400 rounded-full text-sm">
                  <Icon name="alert" className="w-4 h-4" />
                  <span>{dashboardData.fraudAlerts} fraud alerts</span>
                </div>
              )}
            </div>
            
            <div className="space-y-4">
              {dashboardData.settlements.map((settlement) => (
                <div
                  key={settlement.id}
                  className={`p-4 rounded-lg border transition-all duration-300 ${
                    isDark 
                      ? 'bg-gray-700/50 border-gray-600' 
                      : 'bg-gray-50 border-gray-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className={font-medium ${isDark ? 'text-white' : 'text-gray-900'}}>
                        {settlement.from} pays {settlement.to}
                      </p>
                      <p className={text-lg font-semibold text-green-500}>
                        {settlement.currency} {settlement.amount}
                      </p>
                    </div>
                    <button className="px-4 py-2 bg-green-500 text-white rounded-lg text-sm hover:bg-green-600 transition-all duration-300">
                      Mark Paid
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </CosmicBackground>
  );
};

// Add Expense Page
const AddExpensePage = () => {
  const { isDark } = useTheme();
  const { navigate } = useRouter();
  const { showToast } = useToast();
  const [formData, setFormData] = useState({
    amount: '',
    currency: 'USD',
    description: '',
    payer: 'self',
    participants: [],
    splitType: 'equal',
    receipt: null
  });

  const currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', 'CNY', 'INR', 'MXN'];
  const mockParticipants = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Alice Smith', email: 'alice@example.com' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com' },
  ];

  const handleSubmit = (e) => {
    e.preventDefault();
    // Simulate fraud check
    const fraudDetected = Math.random() > 0.7;
    
    if (fraudDetected) {
      showToast('Fraud alert: Unusual spending pattern detected', 'error');
    } else {
      showToast('Expense added successfully', 'success');
      navigate('/dashboard');
    }
  };

  const handleParticipantToggle = (participantId) => {
    setFormData(prev => ({
      ...prev,
      participants: prev.participants.includes(participantId)
        ? prev.participants.filter(id => id !== participantId)
        : [...prev.participants, participantId]
    }));
  };

  return (
    <CosmicBackground>
      <Header />
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <button
            onClick={() => navigate('/dashboard')}
            className={mb-4 flex items-center space-x-2 text-purple-400 hover:text-purple-300 transition-colors duration-300}
          >
            <span>←</span>
            <span>Back to Dashboard</span>
          </button>
          <h1 className={text-3xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}}>
            Add New Expense
          </h1>
        </div>

        <div className={`p-8 rounded-2xl backdrop-blur-md border transition-all duration-300 ${
          isDark 
            ? 'bg-gray-800/50 border-gray-700' 
            : 'bg-white/80 border-gray-200'
        }`}>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                  Amount
                </label>
                <input
                  type="number"
                  step="0.01"
                  required
                  value={formData.amount}
                  onChange={(e) => setFormData({...formData, amount: e.target.value})}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-300 ${
                    isDark 
                      ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                      : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                  } focus:ring-2 focus:ring-purple-500/20`}
                  placeholder="0.00"
                />
              </div>

              <div>
                <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                  Currency
                </label>
                <select
                  value={formData.currency}
                  onChange={(e) => setFormData({...formData, currency: e.target.value})}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-300 ${
                    isDark 
                      ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                      : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                  } focus:ring-2 focus:ring-purple-500/20`}
                >
                  {currencies.map(currency => (
                    <option key={currency} value={currency}>{currency}</option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                Description
              </label>
              <input
                type="text"
                required
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                className={`w-full px-4 py-3 rounded-lg border transition-all duration-300 ${
                  isDark 
                    ? 'bg-gray-700 border-gray-600 text-white focus:border-purple-500' 
                    : 'bg-white border-gray-300 text-gray-900 focus:border-purple-500'
                } focus:ring-2 focus:ring-purple-500/20`}
                placeholder="What was this expense for?"
              />
            </div>

            <div>
              <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                Split Type
              </label>
              <div className="flex space-x-4">
                {['equal', 'proportional', 'exact'].map(type => (
                  <label key={type} className="flex items-center">
                    <input
                      type="radio"
                      name="splitType"
                      value={type}
                      checked={formData.splitType === type}
                      onChange={(e) => setFormData({...formData, splitType: e.target.value})}
                      className="mr-2 text-purple-500"
                    />
                    <span className={capitalize ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                      {type}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                Participants
              </label>
              <div className="space-y-2">
                {mockParticipants.map(participant => (
                  <label key={participant.id} className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={formData.participants.includes(participant.id)}
                      onChange={() => handleParticipantToggle(participant.id)}
                      className="text-purple-500"
                    />
                    <div className="flex items-center space-x-2">
                      <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
                        <Icon name="user" className="text-white w-4 h-4" />
                      </div>
                      <span className={isDark ? 'text-gray-300' : 'text-gray-700'}>
                        {participant.name}
                      </span>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className={block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}}>
                Receipt (Optional)
              </label>
              <div className={`border-2 border-dashed rounded-lg p-6 text-center transition-all duration-300 ${
                isDark 
                  ? 'border-gray-600 hover:border-gray-500' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}>
                <Icon name="upload" className={mx-auto mb-2 w-8 h-8 ${isDark ? 'text-gray-400' : 'text-gray-600'}} />
                <p className={text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}}>
                  Click to upload or drag and drop
                </p>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => setFormData({...formData, receipt: e.target.files[0]})}
                  className="hidden"
                />
              </div>
            </div>

            <div className="flex space-x-4">
              <button
                type="button"
                onClick={() => navigate('/dashboard')}
                className={`flex-1 py-3 px-4 rounded-lg border transition-all duration-300 ${
                  isDark 
                    ? 'border-gray-600 text-gray-300 hover:bg-gray-700' 
                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="flex-1 py-3 px-4 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105"
              >
                Add Expense
              </button>
            </div>
          </form>
        </div>
      </div>
    </CosmicBackground>
  );
};

// Groups Page
const GroupsPage = () => {
  const { isDark } = useTheme();
  const { navigate } = useRouter();
  const { showToast } = useToast();
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  
  const mockGroups = [
    { id: 1, name: 'Roommates', members: 4, balance: 45.50 },
    { id: 2, name: 'Weekend Trip', members: 6, balance: -23.75 },
    { id: 3, name: 'Office Lunch', members: 8, balance: 0